version: '3.9'

services:

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - app-network
    restart: unless-stopped

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092, EXTERNAL://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092, EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network
    restart: unless-stopped

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - 8090:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - app-network
    restart: unless-stopped

  postgres:
    container_name: postgres
    image: postgres:14-alpine
    ports:
      - "5433:5432"
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USERNAME}
    networks:
      - app-network
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - app-network
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "xpack.security.enabled=false"
    mem_limit: 1073741824
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - ./elasticsearch_data:/usr/share/elasticsearch/data:rw
    networks:
      - app-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.17.0
    container_name: logstash
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ../logs:/logstash-input
    ports:
      - "5000:5000"
    depends_on:
      - elasticsearch
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app-network

  prometheus:
    image: prom/prometheus
    volumes:
      - "../src/main/resources/prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - app-network

  node-exporter:
    image: prom/node-exporter
    ports:
      - 9100:9100
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - app-network

  eureka-server:
    container_name: cloud-eureka-discovery-service
    build:
      context: ../../cloud-eureka-discovery-service
    ports:
      - "8761:8761"
    networks:
      - app-network
    restart: unless-stopped

  service-configuration:
    container_name: service-configuration
    build:
      context: ../../service-configuration
    ports:
      - "8888:8888"
    networks:
      - app-network
    restart: unless-stopped

  spring-cloud-gateway:
    container_name: spring-cloud-gateway
    build:
      context: ../../spring-cloud-gateway
    ports:
      - 8282:8181
    depends_on:
      - eureka-server
    env_file:
      - ../.env
    networks:
      - app-network

  resource-service:
    container_name: resource-service
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://service-configuration:8888
    build:
      context: ../.
    depends_on:
      - spring-cloud-gateway
      - postgres
      - kafka
    env_file:
      - ../.env
    networks:
      - app-network

  resource-processor:
    container_name: resource-processor
    build:
      context: ../../resource-processor
    depends_on:
      - spring-cloud-gateway
      - kafka
    env_file:
      - ../.env
    networks:
      - app-network

  song-service:
    container_name: song-service
    build:
      context: ../../song-service
    depends_on:
      - spring-cloud-gateway
      - postgres
    env_file:
      - ../.env
    networks:
      - app-network

  storage-service:
    container_name: storage-service
    build:
      context: ../../storage-service
    depends_on:
      - spring-cloud-gateway
      - postgres
    env_file:
      - ../.env
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  pgadmin:
  grafana-data: